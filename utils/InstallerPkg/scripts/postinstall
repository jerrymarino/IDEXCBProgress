#!/bin/bash
set -e

# TODO: add version checking here
# At the moment, the current build works for all Xcode 11 releases
function install_for_xcode() {
    echo "Installing for Xcode $1"
    BS_DEFAULT_LOCATION="${1}/Contents/SharedFrameworks/XCBuild.framework/PlugIns/XCBBuildService.bundle/Contents/MacOS/XCBBuildService"
    # If someone has Xcode selected an invalid Xcode this won't work.
    if [[ ! -f "$BS_DEFAULT_LOCATION" ]]; then
        echo "Invalid Xcode ${1}" && exit 1
    fi

    BS_INSTALLED_LOCATION="${BS_DEFAULT_LOCATION}.default"
    # Move the original version to the installed location
    if [[ ! -f "$BS_INSTALLED_LOCATION" ]]; then
        mv "$BS_DEFAULT_LOCATION" "$BS_INSTALLED_LOCATION"
    fi

    # Symlink the binary to the default location
    BINARY="$(find "$DSTROOT/Contents/MacOS" -type f | head)"
    ln -sf "$BINARY" "$BS_DEFAULT_LOCATION"
}

function main() {
    # If the user hasn't selected an Xcode then it won't work
    XCODE="$(dirname "$(dirname "$(xcode-select -p)")")"
    install_for_xcode "$XCODE"

    # If xcode is running, then install for that Xcode
    # If install is called 2x it doesn't make a difference
    RUNNING_XCODES="$(ps ax | grep Contents\/MacOS\/Xcode$ | \
        awk '{$1=$2=$3=$4="";print substr($0,5) }')"
    for RUNNING_XCODE in "${RUNNING_XCODES[@]}"; do
        if [[ -n "$RUNNING_XCODE" ]]; then
            install_for_xcode "$(dirname "$(dirname "$(dirname "$RUNNING_XCODE")")")"
        fi
    done

    # Attempt to gracefully quit and re-open Xcode
    # Call quit for each instance of Xcode running, and then re-open
    for RUNNING_XCODE in "${RUNNING_XCODES[@]}"; do
        if [[ -n "$RUNNING_XCODE" ]]; then
            echo "Installer needs to re-launch Xcode ( $RUNNING_XCODE )"
            osascript -e 'quit app "Xcode"' || true
            open "$(dirname "$(dirname "$(dirname "$RUNNING_XCODE")")")"
        fi
    done
}
main "$@"
